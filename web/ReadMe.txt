Q: Чего ставить, куда кликать, как запускать?

A: Если у вас не установлено вообще ничего, можно заглянуть на http://www.asp.net/mvc и нажать на большую зеленую кнопку - она обещает установить полный комплект, да еще и в официально бесплатной версии. Правда, сам я так не пробовал, поэтому не могу точно гарантировать, что бесплатной версии для нашего проекта будет достаточно.

Или же идем по стандартному пути. 
1) Visual Studio 2010. Можно стянуть с пайратбэя (http://thepiratebay.org/torrent/5494125/Microsoft.Visual.Studio.2010.Professional.x86-KOPiE); там совершенно та же версия, что раздается бесплатно по студенческой программе (DreamSpark), а мы и есть студенты - какая разница, с чьих серверов качать?
2) ASP.NET MVC Framework (http://www.asp.net/mvc). Ссылка на отдельный инсталлятор была где-то под большой зеленой кнопкой.
3) IIS. Можно взять IIS Express (ссылка гуглится) - хорошая версия, которую можно установить и вообще не конфигурировать. Или же можно поставить обычный IIS 7.5. Но это если вы семерке или висте. На XP ставится только IIS 5.0, а на нем проект не заработает (я пробовал), поэтому только IIS Express.
4) Первый сервиспак для VS2010 (http://thepiratebay.org/torrent/6407366/Visual_Studio_2010_SP1_ISO). Жизненно необходим в случае IIS Express и, вероятно, не помешает в остальных.
5) SQL Management Studio - по желанию. Это оболочка для СУБД, чтобы глядеть базу не в черной консоли, а в дружественном интерфейсе. Пригодится для начала, чтобы наглядно увидеть, как классы в ILS.Domain соотносятся с реальными таблицами.

Наш проект квартирует в репозитории в папке trunk и состоит из трех частей: ILS.Web (суть и весь основной код), ILS.Domain (описывает базу данных; большая часть классов представляет собой образы, на основе которых MVC за кадром создает реальные таблицы) и ILS.Model (пара старых UML-диаграммок, которые откроются у вас только в Visual Studio Ultimate; роли не играют и вообще их надо будет удалить, чтобы не мешались).

Сразу же одна важная настройка: зайдите в ILS.Web и найдите там connectionStrings.config.template. Сделайте копию и уберите из названия .template (останется файл connectionStrings с расширением config). Откройте его и найдите слово sqlexpress. Теперь откройте Sql Server Configuration Manager (Пуск -> программы -> Microsoft SQL Server 2008 -> Configuration Tools) и посмотрите имя вашего сервера. Если там тоже sqlexpress, то оставьте все как есть, если нет - обновите свой connectionStrings, чтобы совпало. Ну, вы поняли идею - в репозитории хранится только шаблон, а конфиги у каждого в перспективе разные, т.е. можно работать над одним проектом с помощью по-разному названных СУБД. Когда соберетесь обновлять репозиторий, беспокоиться об этих двух файлах не стоит - он сам поймет, что ваш конфиг грузить не надо.
 
Открыв проект в Студии, загляните в свойства ILS.Web на вкладку Web. Там должен быть выбран радиобокс Use Local IIS Web server, написан путь "http://localhost/ILS" в поле Project Url (хотя при сильном желании можно назвать папку не ILS, а как-то по-другому), а также отмечена галочка Use IIS Express, если вы его используете.

Еще лично у меня была такая штука: сайт запускается и работает, а Юнити-файл не загружается. Для IIS Express тут надо открыть в командной строке appcmd.exe, который лежит в папке Program Files/IIS Express, а потом добавить в конфигурацию MIME-запись для Юнити следующей строчкой:
appcmd set config /section:staticContent /+[fileExtension='.unity3d',mimeType='application/vnd.unity']


Q: И чо это ваще, такая куча файлов, где тут все начинается и что откуда вызывается?

A: Прежде всего, у нас есть контроллеры (ILS.Web/Controllers). Контроллеры замечательны тем, что их методы вызываются при путешествии по сайту. Ввели в адресной строке http://localhost/ILS/My/MyMethod - и у вас начинает работать метод MyMethod из класса MyController. Если не уточнить имя метода, то вызовется метод Index. Если не уточнить имя контроллера, то вызовется контроллер Home. То есть корень сайта localhost/ILS - это все равно что localhost/ILS/Home/Index.

Метод контроллера может, например, вернуть в качестве результата определенную страницу, который мы затем и увидим в браузере. Для этого пишется return View(). Тогда вызовется файл Views/<Имя контроллера>/<Имя метода>.cshtml. Этот файл станет одним из двух кусочков, из которого соберется итоговая страница. Второй кусочек - это Shared/_Layout.cshtml, общая часть; каркас, который задает общую разметку. Откройте его, а потом загрузите localhost/ILS и посмотрите через браузер исходный HTML-код. Сходство налицо.

Вас может смутить, что в браузере уже что-то есть, хотя в коде контейнер <body></body> девственно чист, но это лишь потому, что мы используем ExtJS, который рисует страницы исключительно с помощью JavaScript. В том же Shared/_Layout.cshtml можно заметить строчку, подключающую скрипт main.js - вот в нем и задается разметка страницы. Можете как раз начать с него и прочитать все остальные пояснения в комментах.

Да, и если отлаживаете под Файрфоксом, обязательно поставьте Firebug - в нем можно отследить каждое движение скриптов и HTML-страничек сайта. На вкладке консоль появляются все ajax-запросы, которыми обмениваются клиент и сервер, а также можно выводить свой текст функцией console.log